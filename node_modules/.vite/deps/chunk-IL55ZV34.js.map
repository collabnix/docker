{
  "version": 3,
  "sources": ["../../preact/hooks/src/index.js"],
  "sourcesContent": ["import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tc.__hooks = undefined;\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tconst prevScu = currentComponent.shouldComponentUpdate;\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\tcurrentComponent.shouldComponentUpdate = function(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate || hookState._component.props !== p\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any, errorInfo: import('preact').ErrorInfo) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = (err, errorInfo) => {\n\t\t\tif (state._value) state._value(err, errorInfo);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\nexport function useId() {\n\tconst state = getHookState(currentIndex++, 11);\n\tif (!state._value) {\n\t\t// Grab either the root node or the nearest async boundary node.\n\t\t/** @type {import('./internal.d').VNode} */\n\t\tlet root = currentComponent._vnode;\n\t\twhile (root !== null && !root._mask && root._parent !== null) {\n\t\t\troot = root._parent;\n\t\t}\n\n\t\tlet mask = root._mask || (root._mask = [0, 0]);\n\t\tstate._value = 'P' + mask[0] + '-' + mask[1]++;\n\t}\n\n\treturn state._value;\n}\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n"],
  "mappings": "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",
  "names": ["currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "EMPTY", "oldBeforeDiff", "options", "oldBeforeRender", "oldAfterDiff", "diffed", "oldCommit", "__c", "oldBeforeUnmount", "unmount", "getHookState", "index", "type", "__h", "hooks", "__H", "__", "length", "push", "__V", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "_reducer", "action", "currentValue", "__N", "nextValue", "setState", "_hasScuFromHooks", "prevScu", "shouldComponentUpdate", "p", "s", "c", "stateHooks", "filter", "x", "every", "call", "this", "shouldUpdate", "forEach", "hookItem", "props", "useEffect", "callback", "args", "state", "__s", "argsChanged", "_pendingArgs", "useLayoutEffect", "useRef", "initialValue", "useMemo", "current", "useImperativeHandle", "ref", "createHandle", "concat", "factory", "useCallback", "useContext", "context", "provider", "sub", "value", "useDebugValue", "formatter", "useErrorBoundary", "cb", "errState", "componentDidCatch", "err", "errorInfo", "undefined", "useId", "root", "__v", "__m", "mask", "flushAfterPaintEffects", "component", "shift", "invokeCleanup", "invokeEffect", "e", "__e", "__b", "vnode", "requestAnimationFrame", "afterNextFrame", "commitQueue", "some", "hasErrored", "HAS_RAF", "raf", "done", "clearTimeout", "timeout", "cancelAnimationFrame", "setTimeout", "hook", "comp", "cleanup", "oldArgs", "newArgs", "arg", "f"]
}
