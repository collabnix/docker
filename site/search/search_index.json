{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Learn to build, share and run your contanerised applications easily with Docker</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>Beginners</li> <li>Creating Your DockerHub Account</li> <li>Getting Started with Docker Image</li> <li> <p>Running Hello World Example</p> </li> <li> <p>Working with Docker Image</p> </li> <li>Saving Images and Containers as Tar Files for Sharing</li> <li>Building Your First Alpine Docker Image and Push it to DockerHub</li> <li>Accessing &amp; Managing Docker Container</li> <li>Accessing the Container Shell</li> <li>Running a Command inside running Container</li> <li> <p>Managing Docker Containers</p> </li> <li> <p>Getting Started with Dockerfile</p> </li> <li>What is Dockerfile</li> <li>Understanding Layering Concept with Dockerfile</li> <li>Creating Docker Image with<ul> <li>Lab #1: Installing GIT</li> <li>Lab #2: ADD instruction</li> <li>Lab #3: COPY instruction</li> <li>Lab #4: CMD instruction</li> <li>Lab #5: ENTRYPOINT instruction</li> <li>Lab #6: WORKDIR instruction</li> <li>Lab #7: RUN instruction</li> <li>Lab #8: ARG instruction</li> <li>Lab #9: ENV instruction</li> <li>Lab #10: VOLUME instruction</li> <li>Lab #11: EXPOSE instruction</li> <li>Lab #12: LABEL instruction</li> <li>Lab #13: ONBUILD instruction</li> <li>Lab #14: HEALTHCHECK instruction</li> <li>Lab #15: SHELL instruction</li> <li>Lab #16: Entrypoint Vs RUN</li> <li>Lab #17: USER instruction</li> </ul> </li> <li> <p>Writing Dockerfile with Hello Python Script Added</p> </li> <li> <p>Creating Private Docker Registry</p> </li> <li>Building a Private Docker Registry</li> <li> <p>Building a Private Docker Registry with UI</p> </li> <li> <p>Docker Volumes</p> </li> <li>Managing volumes through Docker CLI</li> <li> <p>Creating Volume Mount from docker run command &amp; sharing same Volume Mounts among multiple containers</p> </li> <li> <p>Docker Networking</p> </li> <li>The docker network Command<ul> <li>Lab #1: Listing the Networks</li> <li>Lab #2: Inspecting a Network</li> <li>Lab #3: List network driver plugins</li> <li>Lab #4: Docker Bridge Networking</li> <li>Lab #5: Basics of Docker Bridge Networking</li> <li>Lab #6: Connect a Docker container to bridge network</li> <li>Lab #7: Test Network Connectivity</li> <li>Lab #8: Configure NAT for external connectivity</li> </ul> </li> </ul>"},{"location":"2_Installation/docker-on-jetson-nano/","title":"Getting Started with NVIDIA Jetson Nano","text":""},{"location":"2_Installation/docker-on-jetson-nano/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Intent</li> <li>Hardware</li> <li>Software</li> <li>Preparing Your Jetson Nano</li> <li>Flashing SD card image</li> <li>Vefifying Docker Binaries</li> </ol>"},{"location":"2_Installation/docker-on-jetson-nano/#intent","title":"Intent","text":"<p>Everything and anything you want to know about NVIDIA Jetson Nano, Docker &amp; K3s support</p>"},{"location":"2_Installation/docker-on-jetson-nano/#hardware","title":"Hardware","text":"<ul> <li>Jetson Nano</li> <li>A Camera Module</li> <li>A 5V 4Ampere Charger</li> <li>64GB SD card</li> </ul>"},{"location":"2_Installation/docker-on-jetson-nano/#software","title":"Software","text":"<ul> <li>Jetson SD card image from https://developer.nvidia.com/embedded/downloads</li> <li>Etcher software installed on your system</li> </ul>"},{"location":"2_Installation/docker-on-jetson-nano/#preparing-your-jetson-nano","title":"Preparing Your Jetson Nano","text":""},{"location":"2_Installation/docker-on-jetson-nano/#1-preparing-your-raspberry-pi-flashing-jetson-sd-card-image","title":"1. Preparing Your Raspberry Pi Flashing Jetson SD Card Image","text":"<ul> <li>Unzip the SD card image</li> <li>Insert SD card into your system. </li> <li>Bring up Etcher tool and select the target SD card to which you want to flash the image.</li> </ul> <pre><code>sudo lshw -C system\npico2                       \n    description: Computer\n    product: NVIDIA Jetson Nano Developer Kit\n    serial: 1422919082257\n    width: 64 bits\n    capabilities: smp cp15_barrier setend swp\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#cuda-compiler-and-libraries","title":"CUDA Compiler and Libraries","text":"<pre><code>ajeetraina@ajeetraina-desktop:~/meetup$ nvcc --version\n-bash: nvcc: command not found\najeetraina@ajeetraina-desktop:~/meetup$ export PATH=${PATH}:/usr/local/cuda/bin\najeetraina@ajeetraina-desktop:~/meetup$ export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64\najeetraina@ajeetraina-desktop:~/meetup$ source ~/.bashrc\najeetraina@ajeetraina-desktop:~/meetup$ nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2019 NVIDIA Corporation\nBuilt on Wed_Oct_23_21:14:42_PDT_2019\nCuda compilation tools, release 10.2, V10.2.89\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#devicequery","title":"DeviceQuery","text":"<pre><code>$ pwd\n\n/usr/local/cuda/samples/1_Utilities/deviceQuery\nsudo make\n</code></pre> <pre><code>ajeetraina@ajeetraina-desktop:/usr/local/cuda/samples/1_Utilities/deviceQuery$ sudo make\n/usr/local/cuda-10.2/bin/nvcc -ccbin g++ -I../../common/inc  -m64    -gencode arch=compute_30,code=sm_30 -gencode arch=compute_32,code=sm_32 -gencode arch=compute_53,code=sm_53 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_62,code=sm_62 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_72,code=sm_72 -gencode arch=compute_75,code=sm_75 -gencode arch=compute_75,code=compute_75 -o deviceQuery.o -c deviceQuery.cpp\n/usr/local/cuda-10.2/bin/nvcc -ccbin g++   -m64      -gencode arch=compute_30,code=sm_30 -gencode arch=compute_32,code=sm_32 -gencode arch=compute_53,code=sm_53 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_62,code=sm_62 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_72,code=sm_72 -gencode arch=compute_75,code=sm_75 -gencode arch=compute_75,code=compute_75 -o deviceQuery deviceQuery.o\nmkdir -p ../../bin/aarch64/linux/release\ncp deviceQuery ../../bin/aarch64/linux/release\najeetraina@ajeetraina-desktop:/usr/local/cuda/samples/1_Utilities/deviceQuery$ ls\nMakefile  NsightEclipse.xml  deviceQuery  deviceQuery.cpp  deviceQuery.o  readme.txt\najeetraina@ajeetraina-desktop:/usr/local/cuda/samples/1_Utilities/deviceQuery$ ./deviceQuery\n./deviceQuery Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"NVIDIA Tegra X1\"\n  CUDA Driver Version / Runtime Version          10.2 / 10.2\n  CUDA Capability Major/Minor version number:    5.3\n  Total amount of global memory:                 3956 MBytes (4148387840 bytes)\n  ( 1) Multiprocessors, (128) CUDA Cores/MP:     128 CUDA Cores\n  GPU Max Clock rate:                            922 MHz (0.92 GHz)\n  Memory Clock rate:                             13 Mhz\n  Memory Bus Width:                              64-bit\n  L2 Cache Size:                                 262144 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 32768\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            Yes\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device supports Compute Preemption:            No\n  Supports Cooperative Kernel Launch:            No\n  Supports MultiDevice Co-op Kernel Launch:      No\n  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0\n  Compute Mode:\n     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1\nResult = PASS\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#2-verifying-if-it-is-shipped-with-docker-binaries","title":"2. Verifying if it is shipped with Docker Binaries","text":"<pre><code>ajeetraina@ajeetraina-desktop:~$ sudo docker version\n[sudo] password for ajeetraina: \nClient:\n Version:           19.03.6\n API version:       1.40\n Go version:        go1.12.17\n Git commit:        369ce74a3c\n Built:             Fri Feb 28 23:47:53 2020\n OS/Arch:           linux/arm64\n Experimental:      false\n\nServer:\n Engine:\n  Version:          19.03.6\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.17\n  Git commit:       369ce74a3c\n  Built:            Wed Feb 19 01:06:16 2020\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.3.3-0ubuntu1~18.04.2\n  GitCommit:        \n runc:\n  Version:          spec: 1.0.1-dev\n  GitCommit:        \n docker-init:\n  Version:          0.18.0\n  GitCommit:       \n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#3-checking-docker-runtime","title":"3. Checking Docker runtime","text":"<p>Starting with JetPack 4.2, NVIDIA has introduced a container runtime with Docker integration. This custom runtime enables Docker containers to access the underlying GPUs available in the Jetson family.</p> <pre><code>pico@pico1:/tmp/docker-build$ sudo nvidia-docker version\nNVIDIA Docker: 2.0.3\nClient:\n Version:           19.03.6\n API version:       1.40\n Go version:        go1.12.17\n Git commit:        369ce74a3c\n Built:             Fri Feb 28 23:47:53 2020\n OS/Arch:           linux/arm64\n Experimental:      false\n\nServer:\n Engine:\n  Version:          19.03.6\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.17\n  Git commit:       369ce74a3c\n  Built:            Wed Feb 19 01:06:16 2020\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.3.3-0ubuntu1~18.04.2\n  GitCommit:        \n runc:\n  Version:          spec: 1.0.1-dev\n  GitCommit:        \n docker-init:\n  Version:          0.18.0\n  GitCommit:\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#installing-docker-compose-on-nvidia-jetson-nano","title":"Installing Docker Compose on NVIDIA Jetson Nano","text":"<p>Jetson Nano doesnt come with Docker Compose installed by default. You will need to install it first:</p> <pre><code>export DOCKER_COMPOSE_VERSION=1.27.4\nsudo apt-get install libhdf5-dev\nsudo apt-get install libssl-dev\nsudo pip3 install docker-compose==\"${DOCKER_COMPOSE_VERSION}\"\napt install python3\napt install python3-pip\npip install docker-compose\n</code></pre> <pre><code>docker-compose version\ndocker-compose version 1.26.2, build unknown\ndocker-py version: 4.3.1\nCPython version: 3.6.9\nOpenSSL version: OpenSSL 1.1.1  11 Sep 2018\n</code></pre> <p>Next, add default runtime for NVIDIA:</p> <p>Edit /etc/docker/daemon.json</p> <pre><code>{\n    \"runtimes\": {\n        \"nvidia\": {\n            \"path\": \"/usr/bin/nvidia-container-runtime\",\n            \"runtimeArgs\": []\n        }\n    },\n\n    \"default-runtime\": \"nvidia\",\n    \"node-generic-resources\": [ \"NVIDIA-GPU=0\" ]\n}\n\n</code></pre> <p>Restart the Docker Daemon</p> <pre><code>systemctl restart docker\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#identify-the-jetson-board","title":"Identify the Jetson board","text":"<pre><code>pico@pico1:~$ git clone https://github.com/jetsonhacks/jetsonUtilities\nCloning into 'jetsonUtilities'...\nremote: Enumerating objects: 123, done.\nremote: Counting objects: 100% (39/39), done.\nremote: Compressing objects: 100% (30/30), done.\nremote: Total 123 (delta 15), reused 23 (delta 8), pack-reused 84\nReceiving objects: 100% (123/123), 32.87 KiB | 5.48 MiB/s, done.\nResolving deltas: 100% (49/49), done.\npico@pico1:~$ cd jetson\n-bash: cd: jetson: No such file or directory\npico@pico1:~$ cd jetsonUtilities/\n</code></pre> <pre><code>pico@pico1:~/jetsonUtilities$ ls\nLICENSE  README.md  jetsonInfo.py  scripts\n\npico@pico1:~/jetsonUtilities$ python3 jetsonInfo.py \nNVIDIA Jetson Nano (Developer Kit Version)\n L4T 32.4.4 [ JetPack 4.4.1 ]\n   Ubuntu 18.04.5 LTS\n   Kernel Version: 4.9.140-tegra\n CUDA 10.2.89\n   CUDA Architecture: 5.3\n OpenCV version: 4.1.1\n   OpenCV Cuda: NO\n CUDNN: 8.0.0.180\n TensorRT: 7.1.3.0\n Vision Works: 1.6.0.501\n VPI: 4.4.1-b50\n Vulcan: 1.2.70\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#install-the-latest-version-of-cuda","title":"Install the latest version of CUDA","text":"<pre><code>wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/sbsa/cuda-ubuntu1804.pin\nsudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600\nwget https://developer.download.nvidia.com/compute/cuda/11.3.1/local_installers/cuda-repo-ubuntu1804-11-3-local_11.3.1-465.19.01-1_arm64.deb\nsudo dpkg -i cuda-repo-ubuntu1804-11-3-local_11.3.1-465.19.01-1_arm64.deb\nsudo apt-key add /var/cuda-repo-ubuntu1804-11-3-local/7fa2af80.pub\nsudo apt-get update\nsudo apt-get -y install cuda\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#verify-docker-runtime","title":"Verify Docker runtime","text":"<pre><code>docker info | grep runtime\n Runtimes: nvidia runc io.containerd.runc.v2 io.containerd.runtime.v1.linux\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#testing-gpu-support","title":"Testing GPU Support","text":"<p>We\u2019ll use the deviceQuery NVIDIA test application (included in L4T) to check that we can access the GPU in the cluster. First, we\u2019ll create a Docker image with the appropriate software, run it directly as Docker, then run it using containerd ctr and finally on the Kubernetes cluster itself.</p>"},{"location":"2_Installation/docker-on-jetson-nano/#running-devicequery-on-docker-with-gpu-support","title":"Running deviceQuery on Docker with GPU support","text":""},{"location":"2_Installation/docker-on-jetson-nano/#create-a-directory","title":"Create a directory","text":"<pre><code>mkdir test\ncd test\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#copy-the-sample-files","title":"Copy the sample files","text":"<p>Copy the demos where deviceQuery is located to the working directory where the Docker image will be created:</p> <pre><code>cp -R /usr/local/cuda/samples .\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#create-a-dockerfile","title":"Create a Dockerfile","text":"<pre><code>FROM nvcr.io/nvidia/l4t-base:r32.5.0\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends make g++\nCOPY ./samples /tmp/samples\nWORKDIR /tmp/samples/1_Utilities/deviceQuery\nRUN make clean &amp;&amp; make\nCMD [\"./deviceQuery\"]\n</code></pre> <pre><code>sudo docker build -t ajeetraina/jetson_devicequery . -f Dockerfile\n</code></pre> <pre><code>pico@pico2:~/test$ sudo docker run --rm --runtime nvidia ajeetraina/jetson_devicequery:latest\n./deviceQuery Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"NVIDIA Tegra X1\"\n  CUDA Driver Version / Runtime Version          10.2 / 10.2\n  CUDA Capability Major/Minor version number:    5.3\n  Total amount of global memory:                 3963 MBytes (4155383808 bytes)\n  ( 1) Multiprocessors, (128) CUDA Cores/MP:     128 CUDA Cores\n  GPU Max Clock rate:                            922 MHz (0.92 GHz)\n  Memory Clock rate:                             13 Mhz\n  Memory Bus Width:                              64-bit\n  L2 Cache Size:                                 262144 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 32768\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            Yes\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device supports Compute Preemption:            No\n  Supports Cooperative Kernel Launch:            No\n  Supports MultiDevice Co-op Kernel Launch:      No\n  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0\n  Compute Mode:\n     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1\nResult = PASS\n</code></pre> <p>Test 2: Running deviceQuery on containerd with GPU support</p> <p>Since K3s uses containerd as its runtime by default, we will use the ctr command line to test and deploy the deviceQuery image we pushed on containerd with this script:</p> <pre><code>#!/bin/bash\nIMAGE=ajeetraina/jetson_devicequery:latest\nexport KUBECONFIG=/etc/rancher/k3s/k3s.yaml\nctr i pull docker.io/${IMAGE}\nctr run --rm --gpus 0 --tty docker.io/${IMAGE} deviceQuery\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#execute-the-script","title":"Execute the script","text":"<pre><code>sudo sh usectr.sh\n</code></pre> <pre><code>sudo sh usectr.sh \ndocker.io/ajeetraina/jetson_devicequery:latest:                                   resolved       |++++++++++++++++++++++++++++++++++++++| \nmanifest-sha256:dfeaad4046f78871d3852e5d5fb8fa848038c57c34c6554c6c97a00ba120d550: done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:4438ebff930fb27930d802553e13457783ca8a597e917c030aea07f8ff6645c0:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:b1cdeb9e69c95684d703cf96688ed2b333a235d5b33f0843663ff15f62576bd4:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:bf60857fb4964a3e3ce57a900bbe47cd1683587d6c89ecbce4af63f98df600aa:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:0aac5305d11a81f47ed76d9663a8d80d2963b61c643acfce0515f0be56f5e301:    done           |++++++++++++++++++++++++++++++++++++++| \nconfig-sha256:37987db6d6570035e25e713f41e665a6d471d25056bb56b4310ed1cb1d79a100:   done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:f0f57d03cad8f8d69b1addf90907b031ccb253b5a9fc5a11db83c51aa311cbfb:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:08c23323368d4fde5347276d543c500e1ff9b712024ca3f85172018e9440d8b0:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:04da93b342eb651d6b94c74a934a3290697573a907fa0a06067b538095601745:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:f84ceb6e8887e9b3b454813459ee97c2b9730869dbd37d4cca4051958b7a5a36:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:93752947af53e2a3225e145b359b956df36e20521b5dde0fe6d3fb92fd2a9538:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:b235194751dee33624fc154603f7e25ecdfbb02538fb7d55fa796df9afa95fee:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:905b1329c1d473c79650e33b882d980b3522fb72e58ecd3456c4fb3c4039fe92:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:8931d5ba88b488c949f77f990e8f9198b153ceb71afd0369eac9c39beb38f2d6:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:cfb2938be99fb944fe31165bdf44532a5536865ce53b12eb7758d1e2a51ad33e:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:606a67bb8db9a1111022bdc6406442e11c1a66653136c5c777114bf67b61038a:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:2f37138d1c8ac71d9314a0f8996ba69579bbc6ee6a57440557bc7eef486ed292:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:9ce7ce1da17c2b8149573d1d73132f61a73083f0cd498eeb7a0da404fd77db14:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:a36863a728ec9221c83c745f40511946dfd63beca0f10c9afcc774ef7a98e420:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:86dd6e5994e2c15f2783d8d543327479ccee7f3b20023dd962fdb9a211071e16:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:f5299db1221c515de91f59d84b79f2f839f9c94a5d0cc7fad04134e23ec9b88a:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:15a5811e1a7bf377cbac066b04e0b36b4c1a41ca63eb3c67c17b734577f6beea:    done           |++++++++++++++++++++++++++++++++++++++| \nlayer-sha256:cb893097de39451407d7167b312ec56eaea80baa041877af8239dbe833fa044b:    done           |++++++++++++++++++++++++++++++++++++++| \nelapsed: 81.4s                                                                    total:  305.5  (3.8 MiB/s)                                       \nunpacking linux/arm64/v8 sha256:dfeaad4046f78871d3852e5d5fb8fa848038c57c34c6554c6c97a00ba120d550...\n\ndone\n\n./deviceQuery Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"NVIDIA Tegra X1\"\n  CUDA Driver Version / Runtime Version          10.2 / 10.2\n  CUDA Capability Major/Minor version number:    5.3\n  Total amount of global memory:                 3963 MBytes (4155383808 bytes)\n  ( 1) Multiprocessors, (128) CUDA Cores/MP:     128 CUDA Cores\n  GPU Max Clock rate:                            922 MHz (0.92 GHz)\n  Memory Clock rate:                             13 Mhz\n  Memory Bus Width:                              64-bit\n  L2 Cache Size:                                 262144 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 32768\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            Yes\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device supports Compute Preemption:            No\n  Supports Cooperative Kernel Launch:            No\n  Supports MultiDevice Co-op Kernel Launch:      No\n  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0\n  Compute Mode:\n     &lt; Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) &gt;\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1\nResult = PASS\n\n\n</code></pre>"},{"location":"2_Installation/docker-on-jetson-nano/#test-3-running-devicequery-on-the-k3s-cluster","title":"Test 3: Running deviceQuery on the K3s cluster","text":"<pre><code>pico@pico2:~/test$ cat pod_deviceQuery.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n  name: devicequery\nspec:\n  containers:\n    - name: nvidia\n      image: ajeetraina/jetson_devicequery:latest\n\n      command: [ \"./deviceQuery\" ]\npico@pico2:~/test$\n</code></pre> <pre><code>sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl apply -f ./pod_deviceQuery.yaml\npod/devicequery created\n</code></pre> <pre><code>pico@pico2:~/test$ sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl describe pod devicequery\nName:         devicequery\nNamespace:    default\nPriority:     0\nNode:         pico4/192.168.1.163\nStart Time:   Sun, 13 Jun 2021 09:16:44 -0700\nLabels:       &lt;none&gt;\nAnnotations:  &lt;none&gt;\nStatus:       Pending\nIP:           \nIPs:          &lt;none&gt;\nContainers:\n  nvidia:\n    Container ID:  \n    Image:         ajeetraina/jetson_devicequery:latest\n    Image ID:      \n    Port:          &lt;none&gt;\n    Host Port:     &lt;none&gt;\n    Command:\n      ./deviceQuery\n    State:          Waiting\n      Reason:       ContainerCreating\n    Ready:          False\n    Restart Count:  0\n    Environment:    &lt;none&gt;\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-mcrmv (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             False \n  ContainersReady   False \n  PodScheduled      True \nVolumes:\n  kube-api-access-mcrmv:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       &lt;nil&gt;\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              &lt;none&gt;\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  78s   default-scheduler  Successfully assigned default/devicequery to pico4\n  Normal  Pulling    77s   kubelet            Pulling image \"ajeetraina/jetson_devicequery:latest\"\npico@pico2:~/test$\n</code></pre> <pre><code>cat pod_deviceQuery_jetson4.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n  name: devicequery\nspec:\n  nodeName: pico4\n  containers:\n    - name: nvidia\n      image: ajeetraina/jetson_devicequery:latest\n      command: [ \"./deviceQuery\" ]\npico@pico2:~/test$ \n</code></pre> <pre><code>pico@pico2:~/test$ sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl describe pod devicequery\nName:         devicequery\nNamespace:    default\nPriority:     0\nNode:         pico4/192.168.1.163\nStart Time:   Sun, 13 Jun 2021 09:16:44 -0700\nLabels:       &lt;none&gt;\nAnnotations:  &lt;none&gt;\nStatus:       Running\nIP:           10.42.1.3\nIPs:\n  IP:  10.42.1.3\nContainers:\n  nvidia:\n    Container ID:  containerd://fd502d6bfa55e2f80b2d50bc262e6d6543fd8d09e9708bb78ecec0b2e09621c3\n    Image:         ajeetraina/jetson_devicequery:latest\n    Image ID:      docker.io/ajeetraina/jetson_devicequery@sha256:dfeaad4046f78871d3852e5d5fb8fa848038c57c34c6554c6c97a00ba120d550\n    Port:          &lt;none&gt;\n    Host Port:     &lt;none&gt;\n    Command:\n      ./deviceQuery\n    State:          Waiting\n      Reason:       CrashLoopBackOff\n    Last State:     Terminated\n      Reason:       Error\n      Exit Code:    1\n      Started:      Sun, 13 Jun 2021 09:21:50 -0700\n      Finished:     Sun, 13 Jun 2021 09:21:50 -0700\n    Ready:          False\n    Restart Count:  5\n    Environment:    &lt;none&gt;\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-mcrmv (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             False \n  ContainersReady   False \n  PodScheduled      True \nVolumes:\n  kube-api-access-mcrmv:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       &lt;nil&gt;\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              &lt;none&gt;\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type     Reason     Age                    From               Message\n  ----     ------     ----                   ----               -------\n  Normal   Scheduled  7m51s                  default-scheduler  Successfully assigned default/devicequery to pico4\n  Normal   Pulled     5m45s                  kubelet            Successfully pulled image \"ajeetraina/jetson_devicequery:latest\" in 2m5.699757621s\n  Normal   Pulled     5m43s                  kubelet            Successfully pulled image \"ajeetraina/jetson_devicequery:latest\" in 1.000839703s\n  Normal   Pulled     5m29s                  kubelet            Successfully pulled image \"ajeetraina/jetson_devicequery:latest\" in 967.072951ms\n  Normal   Pulled     4m59s                  kubelet            Successfully pulled image \"ajeetraina/jetson_devicequery:latest\" in 1.025604394s\n  Normal   Created    4m59s (x4 over 5m45s)  kubelet            Created container nvidia\n  Normal   Started    4m59s (x4 over 5m45s)  kubelet            Started container nvidia\n  Warning  BackOff    4m20s (x8 over 5m42s)  kubelet            Back-off restarting failed container\n  Normal   Pulling    2m47s (x6 over 7m51s)  kubelet            Pulling image \"ajeetraina/jetson_devicequery:latest\"\n</code></pre> <pre><code>pico@pico2:~/test$ sudo KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl apply -f ./pod_deviceQuery_jetson4.yaml\npod/devicequery configured\n</code></pre>"},{"location":"3_Docker-For-Beginners/1_Getting-Started-with-Docker-Hub/docker-hub/","title":"How to create Dockerhub Account","text":"<ul> <li>Open https://hub.docker.com and click on \"Sign Up\" for DockerHub</li> </ul> <ul> <li>Enter your username as DockerID and provide your email address( I would suggest you to provide your Gmail ID)</li> </ul> <ul> <li>Example</li> </ul> <p>I have added ajeetraina as my userID as shown below. Please note that we will require this userID at the later point of time during the workshop. Hence, do keep it handy.</p> <p></p> <ul> <li>That's it. Head over to your Email account to validate this account.</li> </ul> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/","title":"How to build Your First Alpine Docker Image and Push it to DockerHub","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#pre-requisite","title":"Pre-requisite","text":"<p>Create an account with DockerHub</p> <p>Under this tutorial we will see how to build our own first alpine based Docker Image.</p> <p><code>docker run -dit alpine sh</code></p> <p></p> <ul> <li> <p>-d: This option tells Docker to run the container in detached mode, which means the container will run in the background and the command prompt will be returned immediately.</p> </li> <li> <p>-i: This option tells Docker to keep the standard input (STDIN) open, even if not attached. This allows you to interact with the container, for example by running commands inside it.</p> </li> <li> <p>-t: This option tells Docker to allocate a pseudo-TTY, which is a terminal in the container. This allows you to run interactive commands inside the container, for example by starting a shell.</p> </li> </ul> <p></p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#updating-apk-packages","title":"Updating APK Packages","text":"<p><code>apk update</code></p> <p></p> <p><code>apk add git</code></p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#now-lets-come-out-of-it-by-ctrlpq-and-commit-the-changes","title":"Now lets come out of it by Ctrl+P+Q and commit the changes","text":"<p><code>docker commit -m \"Added GIT\" 620 ajeetraina/alpine-git</code></p> <p></p> <p><code>docker images</code></p> <p></p> <p>There you see a new image just created.</p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#time-to-tag-the-image","title":"Time to tag the image","text":"<p><code>docker tag --help</code></p> <p></p> <p><code>docker tag ajeetraina/alpine-git:latest ajeetraina/alpine-git:1.0</code></p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/building-first-alpine/#pushing-it-to-dockerhub","title":"Pushing it to DockerHub","text":"<pre><code>$ docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker\n.com to create one.\nUsername: ajeetraina\nPassword:\nWARNING! Your password will be stored unencrypted in /root/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n[node4] (local) root@192.168.0.20 ~\n</code></pre> <pre><code>$ docker push ajeetraina/alpine-git:1.0\nThe push refers to repository [docker.io/ajeetraina/alpine-git]\n3846235f8c17: Pushed\nbcf2f368fe23: Mounted from library/alpine\n1.0: digest: sha256:85d50f702e930db9e5b958387e667b7e26923f4de340534085cea184adb8411e size: 740\n[node4] (local) root@192.168.0.20 ~\n</code></pre>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/","title":"Demonstrating Hello World Example","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Tested on Reading Time Docker Desktop MacOS 5 min"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#running-hello-world-example","title":"Running Hello World Example","text":"<pre><code>$ docker run hello-world\n\n</code></pre>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#explanation","title":"Explanation","text":"<p>This image is a prime example of using the scratch image effectively. See hello.c in https://github.com/docker-library/hello-world for the source code of the hello binary included in this image.</p> <p>So what\u2019s happened here? We\u2019ve called the docker run command, which is responsible for launching containers.</p> <p>The argument hello-world is the name of the image someone created on dockerhub for us. It will first search for \"hello-world\" image locally and then search in Dockerhub.</p> <p>Once the image has been downloaded, Docker turns the image into a running container and executes it.</p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#did-you-know","title":"Did you Know?","text":"<ul> <li>The Hello World Docker Image is only 1.84 KB size.</li> </ul> <ul> <li>While running <code>docker ps</code> command, it doesn't display any running container. Reason - It gets executed once and exit immediately.</li> </ul> <ul> <li>You can use <code>docker inspect &lt;imagename&gt;</code> command to inspect about this particular Docker Image.</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/hello-world/#contributor","title":"Contributor","text":"<p>Ajeet Singh Raina</p> <p>Next: Working with Docker Images</p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/","title":"Saving Images and Containers as Tar Files for Sharing","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#docker-beginners-intermediate-advanced","title":"Docker - Beginners | Intermediate | Advanced","text":"<p>Imagine a scenario where you have built Docker images and containers that you would be interested to keep and share it with your other collaborators or colleagues. The below methods shall help you achieve it.</p> <p>Four basic Docker CLI comes into action:</p> <ul> <li>The <code>docker export</code> - Export a container\u2019s filesystem as a tar archive</li> <li>The <code>docker import</code> - Import the contents from a tarball to create a filesystem image</li> <li>The <code>docker save</code> - Save one or more images to a tar archive (streamed to STDOUT by default)</li> <li>The <code>docker load</code> - Load an image from a tar archive or STDIN</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#create-nginx-container","title":"Create Nginx Container","text":"<p><code>docker run -d -p 80:80 nginx</code></p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/saving-images-and-containers/#displaying-running-container","title":"Displaying Running Container","text":"<p><code>docker ps -a</code></p> <p></p> <p><code>docker export df2 &gt; nginx.tar</code></p> <p></p> <p>You could commit this container as a new image locally, but you could also use the Docker import command:</p> <p><code>docker import - mynginx &lt; nginx.tar</code></p> <p></p> <p></p> <p>If you wanted to share this image with one of your collaborators, you could upload the tar file on a web server and let your collaborator download it and use the import command on his Docker host.</p> <p>If you would rather deal with images that you have already committed, you can use the load and save commands:</p> <p><code>docker save -o mynginx1.tar nginx</code></p> <p></p> <pre><code>$ ls -l\ntotal 218756\n-rw-------    1 root     root     112844800 Dec 18 02:53 mynginx1.tar\n-rw-r--r--    1 root     root     111158784 Dec 18 02:50 nginx.tar\n</code></pre> <pre><code>$ docker rmi mynginx\nUntagged: mynginx:latest\nDeleted: sha256:aaaed50d250a671042e8dc383c6e05012e245f5eaf555d10c40be63f6028ee7b\nDeleted: sha256:41135ad184eaac0f5c4f46e4768555738303d30ab161a7431d28a5ccf1778a0f\n</code></pre> <p>Now delete all images and containers running and try to run the below command to load Docker image into your system:</p> <pre><code>$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n</code></pre> <p><code>docker load &lt; mynginx1.tar</code> </p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/","title":"Working with Docker Images","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> </ul>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#listing-the-docker-images","title":"Listing the Docker Images","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#show-all-images-default-hides-intermediate-images","title":"Show all images (default hides intermediate images)","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#list-images-by-name-and-tag","title":"List images by name and tag","text":"<p>The docker images command takes an optional [REPOSITORY[:TAG]] argument that restricts the list to images that match the argument. If you specify REPOSITORY but no TAG, the docker images command lists all images in the given repository.</p> <p>To demo this, let us pull all various versions of alpine OS</p> <p></p>"},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#list-the-full-length-image-ids","title":"List the full length image IDs","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#listing-out-images-with-filter","title":"Listing out images with filter","text":""},{"location":"3_Docker-For-Beginners/2_Getting-Started-With-Docker-Image/working-with-docker-image/#explanation","title":"Explanation","text":"<p>The [REPOSITORY[:TAG]] value must be an \u201cexact match\u201d.</p>"},{"location":"4_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/","title":"Accessing the Container Shell","text":""},{"location":"4_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"4_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser</li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"4_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#create-ubuntu-container","title":"Create Ubuntu Container","text":"<pre><code>docker run -dit ubuntu\n</code></pre>"},{"location":"4_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#accessing-the-container-shell_1","title":"Accessing the container shell","text":"<pre><code>docker exec -ti &lt;container-id&gt; bash\n</code></pre>"},{"location":"4_Accessing-And-Managing-Docker-Container/Accessing-The-Container-Shell/#accesssing-the-container-shell","title":"Accesssing the container shell","text":"<pre><code>docker attach &lt;container-id&gt;\n</code></pre>"},{"location":"4_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/","title":"Managing Docker containers","text":""},{"location":"4_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"4_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser</li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"4_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/#preparations","title":"Preparations","text":"<ul> <li>Clean your docker host using the commands (in bash):</li> </ul> <pre><code>$ docker rm -f $(docker ps -a -q)\n</code></pre>"},{"location":"4_Accessing-And-Managing-Docker-Container/Managing-Docker-Containers/#instructions","title":"Instructions","text":"<ul> <li>Run the following containers from the dockerhub:</li> </ul> <p><code>$ docker run -d -p 5000:5000 --name app1 selaworkshops/python-app:1.0</code></p> <p><code>$ docker run -d -p 5001:5001 -e \"port=5001\" --name app2 selaworkshops/python-app:2.0</code> * Ensure the containers are running:</p> <p><code>$ docker ps</code> * Stop the first container:</p> <p><code>$ docker stop app1</code> * Kill the second container:</p> <p><code>$ docker kill app2</code> * Display running containers:</p> <p><code>$ docker ps</code> * Show all the containers (includind non running containers):</p> <p><code>$ docker ps -a</code> * Let\u2019s start both containers again:</p> <p><code>$ docker start app1 app2</code> * Restart the second container:</p> <p><code>$ docker restart app2</code> * Display the docker host information with:</p> <p><code>$ docker info</code> * Show the running processes in the first container using:</p> <p><code>$ docker top app1</code> * Retrieve the history of the second container:</p> <p><code>$ docker history selaworkshops/python-app:2.0</code> * Inspect the second container image:</p> <p><code>$ docker inspect selaworkshops/python-app:2.0</code> * Inspect the first container and look for the internal ip:</p> <p><code>$ docker inspect app1</code></p> <p><code>\"Networks\": {                \"bridge\": {                    \"IPAMConfig\": null,                    \"Links\": null,                    \"Aliases\": null,                    \"NetworkID\": \"822cb66790c6358d9decab874916120f3bdeff7193a4375c94ca54d50832303d\",                    \"EndpointID\": \"9aa96dc29be08eddc6d8f429ebecd2285c064fda288681a3611812413cbdfc1f\",                    \"Gateway\": \"172.17.0.1\",                    \"IPAddress\": \"172.17.0.3\",                    \"IPPrefixLen\": 16,                    \"IPv6Gateway\": \"\",                    \"GlobalIPv6Address\": \"\",                    \"GlobalIPv6PrefixLen\": 0,                    \"MacAddress\": \"02:42:ac:11:00:03\",                    \"DriverOpts\": null                }            }</code> * Show the logs of the second container using the flag \u2013follow:</p> <p><code>$ docker logs --follow app2</code> * Browse to the application and see the containers logs from the terminal:</p> <p><code>http://localhost:5001</code> * Stop to tracking logs:</p> <p><code>$ CTRL + C</code></p>"},{"location":"4_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/","title":"Running a command inside running Container","text":""},{"location":"4_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/#tested-infrastructure","title":"Tested Infrastructure","text":"Platform Number of Instance Reading Time Play with Docker 1 5 min"},{"location":"4_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/#pre-requisite","title":"Pre-requisite","text":"<ul> <li>Create an account with DockerHub</li> <li>Open PWD Platform on your browser</li> <li>Click on Add New Instance on the left side of the screen to bring up Alpine OS instance on the right side</li> </ul>"},{"location":"4_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/#create-ubuntu-container","title":"Create Ubuntu Container","text":"<pre><code>docker run -dit ubuntu\n</code></pre>"},{"location":"4_Accessing-And-Managing-Docker-Container/Running-A-Command-Inside-Running-Container/#opening-up-the-bash-shell","title":"Opening up the bash shell","text":"<pre><code>docker exec -t &lt;container-id&gt; bash\n</code></pre>"}]}